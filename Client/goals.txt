Image comparison matching method
Minutiae matching using library
On-board fingerprint matching 
Encryption and decryption of files using fingerprint templates from sensor
    store templates in database?

    take image
    call image2tz
    call upchar
    read character file

    repeat and see if the files are the same
        they are not 

PROCESS idea 1:
1. user scans fingerprint
2. Fingerprint is stored in charbuffer1 on scanner
3. Python sequentially uploads a image from the database to the scanner charbuffer1
4. Match() is performed on the scanner
5. If there is a match then the character file from the database is used to generate the decryption key

PROCESS idea 2: -> Probs better idk because we don't have to do a ton of IO on the scanner (slow)
1. User scans fingerprint
2. Download fingerprint to computer
3. Fingerprint is uploaded to server along with selected match method
4. Match fingerprint on server against database using the selected method
    - How do we store the image files in the DB? 
        - bytearray
    - Server is written in Java 
    - Server returns match/no match
    - If there is a match it also returns the decryption key + image
5. Python reads the result and if there's match reads the decryption key too
6. DRM protected software is decrypted

TODO:
    Must-DO:
        1. Add enroll functionality \/
    2. Check that we can generate an identical key each time on the server
        3. Extend server communication protocol to allow for key transmission
    Should-Do:
        4. SSIM and MSE matching methods implementation
    Extra time:
        - Extend database to hold a list of licenses that each fingerprint holds
        - Create actual DRM client UI

DATABASE CHANGE: licenses branch
Database is being extended to contain another table with the software that this drm controls
The Licenses table will contain a foreign for each fingerprint with the corresponding licenses it holds

ENCRYPTION PROTOCOL:
1. Publisher opens an Admin client app
2. Admin Client app allows the user to select a folder to Encrypt 
3. Admin client app then requires a fingerprint to encrypt the folder with
4. The folder is encrypted using the supplied fingerprint as password
5. Fingerprint is then enrolled on the servers database
6. Software is then distributed to the client who bought a license for it 

DECRYPTION PROTOCOL:
1. The client now has the encrypted folder and wishes to launch the software
2. A decryption client app is opened and the encrypted folder is selected
3. The user scans their fingerprint
4. An AuthenticationRequest is sent to the server
5. If the fingerprint is a match to the database, the server checks if the user has a license for the software that is being launched
6. If they have a license, the server derives the decryption key from the fingerprint stored in the database
7. The server responds with an AuthenticationResponse which contains the decryption key 